# -*- coding: utf-8 -*-
"""Double.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/103JaM6-Zbu-yYYhwgwp5c-kjlUeJt4qo
"""

import pandas as pd
import numpy as np

from google.colab import files

uploaded = files.upload()

for fn in uploaded.keys():
  print('User uploaded file "{name}" with length {length} bytes'.format(
      name=fn, length=len(uploaded[fn])))

df=pd.read_csv('RoomTariffPrediction .csv')
df

temp={'PlaceName':['Bandarban','Gulshan','Dhaka','Chittagong','Cox\'s Bazar','Rajshahi','Rangamati','Sreemangal','Sylhet']}
#df=pd.DataFrame(temp,columns=["PlaceName"])
temp_dict={'Bandarban':3,'Gulshan':5,'Dhaka':3,'Chittagong':3,'Cox\'s Bazar':4,'Rajshahi':1,'Rangamati':4,'Sreemangal':4,'Sylhet':2}
df["PlaceName"]=df.PlaceName.map(temp_dict)
#df

temp={'IsTouristSpot':['Yes','No']}
#df=pd.DataFrame(temp,columns=["PlaceName"])
temp_dict={'Yes':1,'No':0}
df["IsTouristSpot"]=df.IsTouristSpot.map(temp_dict)
#df

temp={'HasSwimmingPool':['Yes','No']}
#df=pd.DataFrame(temp,columns=["PlaceName"])
temp_dict={'Yes':1,'No':0}
df["HasSwimmingPool"]=df.HasSwimmingPool.map(temp_dict)

temp={'GymFacilities':['Yes','No']}
#df=pd.DataFrame(temp,columns=["HasRefrigerator"])
temp_dict={'Yes':1,'No':0}
df["GymFacilities"]=df.GymFacilities.map(temp_dict)

temp={'HasBalcony':['Yes','No']}
#df=pd.DataFrame(temp,columns=["HasRefrigerator"])
temp_dict={'Yes':1,'No':0}
df["HasBalcony"]=df.HasBalcony.map(temp_dict)

temp={'HasRefrigerator':['Yes','No']}
#df=pd.DataFrame(temp,columns=["HasRefrigerator"])
temp_dict={'Yes':1,'No':0}
df["HasRefrigerator"]=df.HasRefrigerator.map(temp_dict)
#df

temp={'RoomType':['Single','Double','Triple','Quadruple','Twin','Suite']}
#df=pd.DataFrame(temp,columns=["PlaceName"])
temp_dict={'Single':1,'Double':2,'Triple':3,'Quadruple':5,'Twin':4,'Suite':6}
df["RoomType"]=df.RoomType.map(temp_dict)
#df

temp={'RoomView':['None','City View','Hill View','Sea View','Lake View']}
#df=pd.DataFrame(temp,columns=["PlaceName"])
temp_dict={'None':1,'City View':2,'Hill View':4,'Sea View':5,'Lake View':3}
df["RoomView"]=df.RoomView.map(temp_dict)
df

#separate the other attributes from the predicting attribute
x=df.drop('Rent(Per Day)',axis=1)
#separte the predicting attribute into Y for model training 
y=df['Rent(Per Day)']
x

# importing train_test_split from sklearn
from sklearn.model_selection import train_test_split
#splitting data
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.2, random_state =42)

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
# %matplotlib inline
import sklearn.metrics as metrics
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.tree import DecisionTreeRegressor
from sklearn.neighbors import KNeighborsRegressor 
from sklearn.ensemble import RandomForestClassifier
from sklearn.linear_model import Ridge
from sklearn.model_selection import GridSearchCV
from sklearn.metrics import r2_score
from sklearn.metrics import f1_score
from sklearn.metrics import recall_score
from sklearn.metrics import precision_score
from sklearn.model_selection import cross_val_score
from sklearn.metrics import mean_squared_error
from sklearn.metrics import mean_absolute_error
from sklearn.neighbors import KNeighborsRegressor 
from sklearn.model_selection import GridSearchCV
import plotly.offline as py
import plotly.graph_objs as go
py.init_notebook_mode(connected=True)
from sklearn.preprocessing import MinMaxScaler

# Creating a Decision Tree Regressor
regressor_DTR=DecisionTreeRegressor()
regressor_DTR.fit(x_train,y_train)

# Predicting the test set results
Prediction=regressor_DTR.predict(x_test)
print(y_test)
print(Prediction)

# Performance Metrics in Decision Tree Regression
print('R2 score in Decision Tree Regression= ',metrics.r2_score(y_test,Prediction))
print('Mean Squared Error in Decision Tree Regression=',metrics.mean_squared_error(y_test,Prediction))
print('Root Mean Squared Error in Decision Tree Regression=', np.sqrt(metrics.mean_squared_error(y_test,Prediction)))
print('Mean Absolute Error in Decision Tree Regression=',metrics.mean_absolute_error(y_test,Prediction))

#Regression Model Ridge Regression
regressor_Ridge=Ridge()
regressor_Ridge.fit(x_train,y_train)

Ridge_Prediction=regressor_Ridge.predict(x_test)
print(y_test)
print(Ridge_Prediction)

print('R2 Score in Ridge Regression= ',metrics.r2_score(y_test,Ridge_Prediction))
print('Mean Squared Error in Ridge Regression=',metrics.mean_squared_error(y_test,Ridge_Prediction))
print('Root Mean Squared Error in Ridge Regression=', np.sqrt(metrics.mean_squared_error(y_test,Ridge_Prediction)))
print('Mean Absolute Error in Ridge Regression=',metrics.mean_absolute_error(y_test,Ridge_Prediction))

#MultipleLINEARREGRESSION
# importing module
from sklearn.linear_model import LinearRegression
# creating an object of LinearRegression class
LR=LinearRegression()
# fitting the training data
LR.fit(x_train,y_train)

y_prediction=LR.predict(x_test)
y_prediction

# importing metrics_calcultion module
from sklearn.metrics import r2_score
from sklearn.metrics import mean_squared_error
from sklearn.metrics import mean_absolute_error
# predicting the accuracy score

print('r2 socre =',r2_score(y_test,y_prediction))
print('mean_sqrd_error =',mean_squared_error(y_test,y_prediction))
print('root_mean_squared error =',np.sqrt(mean_squared_error(y_test,y_prediction)))
print('mean_absolute error  =',mean_absolute_error(y_test,y_prediction))

#RANDOMFOREST
# Feature Scaling
from sklearn.preprocessing import StandardScaler
sc=StandardScaler()
x_train=sc.fit_transform(x_train)
x_test=sc.transform(x_test)

#training the algorithm
from sklearn.ensemble import RandomForestRegressor
regressor=RandomForestRegressor(n_estimators=20,random_state=42)
regressor.fit(x_train,y_train)
y_pred=regressor.predict(x_test)

#Evaluating the Algorithm
from sklearn import metrics
print('r2 socre =',r2_score(y_test,y_prediction))
print('Mean Absolute Error:', metrics.mean_absolute_error(y_test, y_pred))
print('Mean Squared Error:', metrics.mean_squared_error(y_test, y_pred))
print('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(y_test, y_pred)))

from sklearn import preprocessing
le = preprocessing.LabelEncoder()
le.fit(y_train)

le.transform(y_train)

pd.Series(le.transform(y_train))

from sklearn.linear_model import Lasso
model_lasso = Lasso(alpha=0.01)
model_lasso.fit(x_train, y_train) 
pred_train_lasso= model_lasso.predict(x_train)

from sklearn.metrics import r2_score
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error
from sklearn.metrics import mean_absolute_error
from math import sqrt

pred_test_lasso= model_lasso.predict(x_test)
print('Root Mean Squared Error:',np.sqrt(mean_squared_error(y_test,pred_test_lasso))) 
print('Mean Absolute Error:',mean_absolute_error(y_test,pred_test_lasso)) 
print('Mean Squared Error:',mean_squared_error(y_test,pred_test_lasso))
print('r2 socre =',r2_score(y_test, pred_test_lasso))

#SVM
#Import svm model
from sklearn import svm

#Create a svm Classifier
clf = svm.SVC(kernel='linear') # Linear Kernel

#Train the model using the training sets
clf.fit(x_train, y_train)

#Predict the response for test dataset
y_pred = clf.predict(x_test)

print('r2 socre =',r2_score(y_test, y_pred))
print('Mean Squared Error:',mean_squared_error(y_test, y_pred))
print('Mean Absolute Error:',mean_absolute_error(y_test, y_pred))
print('Root Mean Squared Error:',np.sqrt(mean_squared_error(y_test, y_pred)))